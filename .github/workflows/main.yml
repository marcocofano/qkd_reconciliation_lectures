name: Build and Release LaTeX PDF

on:
  push:
    branches:
    - "main"
  pull_request:
  create:  # Run release stage when a tag is pushed
    tags:
      - '*' 

jobs:
  build:
    name: Build LaTeX PDF
    if: "!contains(github.event.head_commit.message, 'chore(release)')"
    runs-on: ubuntu-latest  # Using Ubuntu for LaTeX environment
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Cache Docker Image
        id: cache-docker
        uses: actions/cache@v3
        with:
          path: /tmp/.docker-cache
          key: texlive-docker-${{ runner.os }}-latest
          restore-keys: texlive-docker-${{ runner.os }}-
          
      - name: Pull LaTeX Docker Image (if not cached)
        run: |
          if [ ! -d "/tmp/.docker-cache" ]; then
            docker pull ghcr.io/xu-cheng/texlive-full:latest
            mkdir -p /tmp/.docker-cache
            docker save ghcr.io/xu-cheng/texlive-full:latest -o /tmp/.docker-cache/texlive-image.tar
          else
            docker load -i /tmp/.docker-cache/texlive-image.tar
          fi

      - name: Compile LaTeX to PDF inside Docker
        run: |
          docker run --rm -v ${{ github.workspace }}:/workspace -w /workspace ghcr.io/xu-cheng/texlive-full:latest /bin/sh -c "
            cd src && make report && mv main.pdf ../output.pdf
          "

      - name: Upload PDF as artifact
        uses: actions/upload-artifact@v4
        with:
          name: Compiled-PDF
          path: output.pdf

  release:
    name: Create Release
    needs: build
    if: github.event_name == 'create' && startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Download PDF artifact
        uses: actions/download-artifact@v4
        with:
          name: Compiled-PDF
          path: ./

      - name: Extract Version Number from Tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

      - name: Install Lua (Minimal)
        run: sudo apt-get install -y lua5.3
      - name: Run Lua Script for Release Notes
        run: |
          lua scripts/generate_release_notes.lua "$env.VERSION" > release_notes.md

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: "Release ${{ env.VERSION }}"
          body_path: release_notes.md
          files: "output.pdf"
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}
